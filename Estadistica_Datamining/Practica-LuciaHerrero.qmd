---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

```{r}
library(tidyverse)

df_madrid<-airbnb[,c('City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude')]|>
  filter(City=='Madrid'& Room.Type=='Entire home/apt'& Neighbourhood!='')

df_madrid<-df_madrid|>select(-'City',-'Room.Type')

```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

```{r}
df_madrid$Square.Meters<-df_madrid$Square.Feet*0.092903
```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

```{r}
cat('El',
    with(df_madrid,sum(is.na(Square.Meters))*100/length(Square.Meters)),'% de los apartamentos no muestran los metros cuadrados')
```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}
cat('De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA, el',
    with(df_madrid,length(Square.Meters[which(Square.Meters==0)])*100/sum(!is.na(Square.Meters))),
    '% tienen 0 metros cuadrados'
    )

```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

```{r}
df_madrid$Square.Meters[which(df_madrid$Square.Meters==0)]<-NA

```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
library(ggplot2)
ggplot(data=df_madrid,aes(x=Square.Meters))+
  geom_histogram(bins=600/25,fill='#91c9c6',color='#5d8f8c')+
  labs(x='Metros Cuadrados', y='Cantidad de apartamentos')+
  theme_bw()+scale_x_continuous(breaks=seq(from=0, to=500, by=25))


cat('Hay observaciones con insuficientes metros cuadrados para ser un apartamento')
```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}
for (small_surface_index in which(df_madrid$Square.Meters<20)){
  df_madrid$Square.Meters[small_surface_index]<-NA
}

```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

```{r}

df_madrid_na_count<-df_madrid|>group_by(Neighbourhood)|>summarise(NA_count=sum(is.na(Square.Meters)), Total=n())

removable_neighbourhoods<-df_madrid_na_count[which(df_madrid_na_count$NA_count==df_madrid_na_count$Total),]$Neighbourhood

df_madrid<-df_madrid|>filter(!(Neighbourhood %in% removable_neighbourhoods))

```

```         
------------------------------------------------------------------------
```

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

```{r}
cat('Al haber más de 2 barrios se comprobaría con ANOVA o con Kruskal-Wallis, según si las observaciones de los barrios siguen una distribucion normal o no.\n

Comprobamos si las observaciones de Square.Meters siguen una distribucion normal con Shapiro. Para hacer el test de Shapiro debemos tener al menos 3 observaciones distintas de NA.\n\n')

At_least_3_obs<-df_madrid_na_count[which(df_madrid_na_count$Total-df_madrid_na_count$NA_count>=3),]$Neighbourhood

df_madrid_na_count$Shapiro_Normal_distr<-NA

for (neighbourhood in At_least_3_obs){
  df_madrid_na_count$Shapiro_Normal_distr[which(df_madrid_na_count$Neighbourhood==neighbourhood)]<-shapiro.test(df_madrid[which(df_madrid$Neighbourhood==neighbourhood),]$Square.Meters)$p.value>0.05
}

df_madrid_na_count

cat('De los barrios con más de 3 observaciones, teniendo en cuenta los p valores obtenidos con el test de Shapiro, podemos deducir que no todos siguen una distribución normal. Usaremos, por tanto, Kruskal-Wallis.\n\n')
df_madrid$Neighbourhood<-as.factor(df_madrid$Neighbourhood)
cat('Dado que el p valor obtenido con el test de',kruskal.test( Square.Meters ~ Neighbourhood, data=df_madrid)$p.value,'(<0.05), el test nos indica que se cumple la hipótesis alternativa (no todos los barrios tienen la misma media).')

```

```         
------------------------------------------------------------------------
```

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

```{r}
tky<-TukeyHSD(aov(Square.Meters ~ Neighbourhood, data=df_madrid))
tky.result<-data.frame(tky$Neighbourhood)
cn <-sort(unique(df_madrid$Neighbourhood))
resm <- matrix(NA, length(cn),length(cn))
rownames(resm) <- cn
colnames(resm) <- cn
resm[lower.tri(resm) ] <- round(tky.result$p.adj,4)
resm[upper.tri(resm) ] <- t(resm)[upper.tri(resm)] 
diag(resm) <- 1

cat('La matriz muestra los p valores entre los barrios. Los que tengan p valores altos (>0.05) tendrán medias iguales, tal y como indica el dataframe Averages_comparison_df')
Averages_comparison_df<-data.frame(Neighbourhood=rownames(tky.result), p_value=tky.result$p.adj,Same_average=(tky.result$p.adj>0.5))
Averages_comparison_df
```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es alto significa que los barrios son diferentes, si es bajo significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

```{r}
library(dendextend)
library(gridExtra)
neighbourhood.dist<- as.dist(1 - resm)
 
neighbourhood.tree <- hclust(neighbourhood.dist, method="complete")
neighbourhood.dend <- as.dendrogram(neighbourhood.tree)
plot(color_branches(neighbourhood.dend, h=0.5), main='Complete method')
abline(h=0.5,col="red")

clusters <- cutree(neighbourhood.dend, h=0.5)
```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

```{r}
cat('Elegimos 0.5 como punto de corte ya que coincide en alta medida con lo indicado con el test de Tuckey con respecto a qué barrios son diferentes entre sí. Las subdivisiones que se producen en valors inferiores dividen barrios que el test de Tuckey considera como pertenecientes al mismo grupo. Con 0.5 como punto de corte obtenemos', length(levels(factor(clusters))), 'clusters.')
```

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

```{r}
df_clusters<-data.frame(clusters)
df_clusters$Neighbourhood<-rownames(df_clusters)
df_madrid<-merge(df_madrid,df_clusters, by='Neighbourhood')
df_madrid$neighb_id<-as.factor(df_madrid$clusters)
df_madrid<-df_madrid|>select(-'clusters')
```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

```{r}
set.seed(123)
test_index<-sort(sample(1:length(df_madrid[,1]),round(length(df_madrid[,1])*0.25,0),replace=FALSE))

df_m_test<-df_madrid[test_index,]
df_m_train<-df_madrid[-test_index,]

```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

```{r}
ggplot(data=df_m_train, aes(x=Bedrooms,y=Square.Meters,color=neighb_id))+geom_point()+ggtitle('Habitaciones-Superficie (m2) (Datos de observaciones)')

ggplot(data=df_m_train, aes(x=Bathrooms,y=Square.Meters,color=neighb_id))+geom_point()+ggtitle('Baños-Superficie (m2) (Datos de observaciones)')

ggplot(data=df_m_train, aes(x=Price,y=Square.Meters,color=neighb_id))+geom_point()+ggtitle('Precio-Superficie (m2) (Datos de observaciones)')

#se observa linealidad en price, square.meters y bathrooms y se observa influencia de neigb_id

model<-with(df_m_train,lm(formula=Square.Meters~Bathrooms+Bedrooms+Price+neighb_id))
summary(model)

df_m_test$M2_predicted<-predict(model, df_m_test)

caret::postResample(pred=df_m_test$M2_predicted, obs= df_m_test$Square.Meters)

df_M2_predicted_madrid<-data.frame(Neighbourhood=df_madrid$Neighbourhood)
df_M2_predicted_madrid$Bedrooms<-df_madrid$Bedrooms
df_M2_predicted_madrid$Bathrooms<-df_madrid$Bathrooms
df_M2_predicted_madrid$Price<-df_madrid$Price
df_M2_predicted_madrid<-merge(df_M2_predicted_madrid,df_clusters, by='Neighbourhood')
df_M2_predicted_madrid$neighb_id<-as.factor(df_M2_predicted_madrid$clusters)
df_M2_predicted_madrid<-df_M2_predicted_madrid|>select(-'clusters')
df_M2_predicted_madrid$M2_predicted<-predict(model, df_madrid)
cat('Dataframe df_M2_predicted_madrid con metros cuadrados predecidos en función de las columnas Bedrooms, Bathrooms, Price y neighb_id de df_madrid')
df_M2_predicted_madrid
```

```{r}

```

------------------------------------------------------------------------

14. Evaluar la calidad de vuestro modelo

```{r}
ggplot(data=df_m_test, aes(x=Price,color=neighb_id))+
  geom_point(aes(y=M2_predicted,color = as.factor(neighb_id)),alpha=0.1,size=0.5)+
  geom_point(aes(y=Square.Meters,color = as.factor(neighb_id)), shape='x', size=2.5)

cat('Los valores de train (R squared =0.719) y test (R squared =0.769) son muy parecidos y gráficamente se observa la similitud (precicción representada con puntos y observaciones representadas con X), por lo que el modelo puede ser efectivo.')
model
```

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

```{r}
df_clusters$clusters<-as.factor(df_clusters$clusters)
cat('Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80, este tendría',
    as.numeric(predict(model, data.frame(Bathrooms=1, Price=80, Bedrooms=3,neighb_id=df_clusters$clusters[which(df_clusters$Neighbourhood=='Sol')]))),
    'metros cuadrados.\n
    Cada habitación extra hace que se sumen 19.66033 m2 a la predicción, ya que ese es el beta estimated de Bedrooms en el modelo.')
```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}
for (i in which(is.na(df_madrid$Square.Meters))){
  df_madrid$Square.Meters[i]<-with(df_madrid,as.numeric(predict(
    model, 
    data.frame(
      Bathrooms=Bathrooms[i], 
      Price=Price[i], 
      Bedrooms=Bedrooms[i],
      neighb_id=neighb_id[i]))))
}

```

------------------------------------------------------------------------
